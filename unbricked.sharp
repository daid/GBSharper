; https://raw.githubusercontent.com/gbdev/gb-asm-tutorial/master/unbricked/bricks/main.asm
; INCLUDE "hardware.inc"
reg rP1 = 0xFF00
reg rLCDC = 0xFF40
reg rLY = 0xFF44
reg rBGP = 0xFF47
reg rOBP0 = 0xFF48
reg _OAMRAM0 = 0xFE00
reg _OAMRAM1 = 0xFE01
reg _OAMRAM2 = 0xFE02
reg _OAMRAM3 = 0xFE03
reg _OAMRAM4 = 0xFE04
reg _OAMRAM5 = 0xFE05
reg _OAMRAM6 = 0xFE06
reg _OAMRAM7 = 0xFE07


const BRICK_LEFT = 0x05
const BRICK_RIGHT = 0x06
const BLANK_TILE = 0x08

var frameCounter = 0

var curKeys = 0
var newKeys = 0

var ballMomentumX = 0
var ballMomentumY = 0

fn main
    while rLY < 144
        pass
    rLCDC = 0

    ; Copy the tile data
;    ld de, Tiles
;    ld hl, $9000
;    ld bc, TilesEnd - Tiles
;    call Memcopy

    ; Copy the tilemap
;    ld de, Tilemap
;    ld hl, $9800
;    ld bc, TilemapEnd - Tilemap
;    call Memcopy

    ; Copy the paddle tile
;    ld de, Paddle
;    ld hl, $8000
;    ld bc, PaddleEnd - Paddle
;    call Memcopy

    ; Copy the ball tile
;    ld de, Ball
;    ld hl, $8010
;    ld bc, BallEnd - Ball
;    call Memcopy

;    xor a, a
;    ld b, 160
;    ld hl, _OAMRAM
;ClearOam:
;    ld [hli], a
;    dec b
;    jp nz, ClearOam

    ; Initialize the paddle sprite in OAM
    _OAMRAM0 = 128 + 16
    _OAMRAM1 = 16 + 8
    _OAMRAM2 = 0
    _OAMRAM3 = 0
    ; Now initialize the ball sprite
    _OAMRAM4 = 100 + 16
    _OAMRAM5 = 32 + 8
    _OAMRAM6 = 1
    _OAMRAM7 = 0

    ; The ball starts out going up and to the right
    ballMomentumX = 1
    ballMomentumY = -1

    ; Turn the LCD on
    rLCDC = 0x83 ; LCDCF_ON | LCDCF_BGON | LCDCF_OBJON

    ; During the first (blank) frame, initialize display registers
    rBGP = 0b11100100
    rOBP0 = 0b11100100

    ; Initialize global variables
    frameCounter = 0
    curKeys = 0
    newKeys = 0

    while 1
        while rLY > 143
            pass
        while rLY < 144
            pass

        ; Add the ball's momentum to its position in OAM.
        _OAMRAM5 = _OAMRAM5 + ballMomentumX
        _OAMRAM4 = _OAMRAM4 + ballMomentumY

        var tile_addr: u16 = GetTileByPixel(_OAMRAM4 - 17, _OAMRAM5 - 8)
        var tile = *(tile_addr as u16*)
        if isWallTile(tile)
    ;    call CheckAndHandleBrick
            ballMomentumY = 1
    
        tile_addr = GetTileByPixel(_OAMRAM4 - 16, _OAMRAM5 - 7)
        tile = *(tile_addr as u16*)
        if isWallTile(tile)
    ;    call CheckAndHandleBrick
            ballMomentumX = -1

        tile_addr = GetTileByPixel(_OAMRAM4 - 16, _OAMRAM5 - 9)
        tile = *(tile_addr as u16*)
        if isWallTile(tile)
    ;    call CheckAndHandleBrick
            ballMomentumX = 1

        tile_addr = GetTileByPixel(_OAMRAM4 - 15, _OAMRAM5 - 8)
        tile = *(tile_addr as u16*)
        if isWallTile(tile)
    ;    call CheckAndHandleBrick
            ballMomentumY = -1

        ; First, check if the ball is low enough to bounce off the paddle.
        if _OAMRAM0 == _OAMRAM4
            ; Now let's compare the X positions of the objects to see if they're touching.
            if _OAMRAM5 < _OAMRAM1 + 16
                if _OAMRAM5 > _OAMRAM1 - 8
                    ballMomentumY = -1

        ; Check the current keys every frame and move left or right.
        input()

        if curKeys & 0x20
            if _OAMRAM1 != 15
                _OAMRAM1 = _OAMRAM1 - 1
        if curKeys & 0x10
            if _OAMRAM1 != 105
                _OAMRAM1 = _OAMRAM1 + 1


;; Convert a pixel position to a tilemap address
;; hl = $9800 + X + Y * 32
;; @param b: X
;; @param c: Y
;; @return hl: tile address
fn GetTileByPixel x y > u16
    var addr: u16 = ((y & 0b11111000) as u16) * 4
    addr = ((x >> 3) as u16) + addr
    addr = addr + 0x9800
    return addr


;; @param a: tile ID
;; @return z: set if a is a wall.
fn isWallTile tile > u8
    if tile < 8
        return 1
    return 0

;; ANCHOR: check-for-brick
;; Checks if a brick was collided with and breaks it if possible.
;; @param hl: address of tile.
;CheckAndHandleBrick:
;    ld a, [hl]
;    cp a, BRICK_LEFT
;    jr nz, CheckAndHandleBrickRight
;    ; Break a brick from the left side.
;    ld [hl], BLANK_TILE
;    inc hl
;    ld [hl], BLANK_TILE
;CheckAndHandleBrickRight:
;    cp a, BRICK_RIGHT
;    ret nz
;    ; Break a brick from the right side.
;    ld [hl], BLANK_TILE
;    dec hl
;    ld [hl], BLANK_TILE
;    ret
;; ANCHOR_END: check-for-brick

fn input
    rP1 = 0x10
    var keys = rP1 | 0xF0
    rP1 = 0x20
    keys = -(keys & ((rP1 << 4) | 0x0F))
    newKeys = (curKeys ^ keys) & keys
    curKeys = keys
